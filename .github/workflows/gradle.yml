# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "develop"]
  pull_request:
    branches: [ "develop"]

jobs:
  #1. 빌드
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1-1. repository checkout
      - uses: actions/checkout@v4

      # 1-2. jdk 환경 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 1-3. '*.properties' 파일 세팅
      - name: application.properties 파일 설정
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml

      # 1-4. gradle 환경 설치
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      # 1-5. 빌드
      - name: Build with Gradle Wrapper
        run: ./gradlew clean build -x test

      # 1-6. 빌드된 파일 이름 변경
      - name: 빌드된 파일 이름 변경하기
        run: mv ./build/libs/*SNAPSHOT.jar ./gdg-homepage-dev.jar

      # 1-7. 빌드 및 이름 변경된 cicdtest.jar 파일 EC2 전송
      - name: SCP로 EC2에 빌드된 파일 전송하기
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: gdg-homepage-dev.jar
          target: /home/ubuntu

        # 1-8. docker-compose.yml 전송
      - name: docker-compose 파일 전송
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: docker/docker-compose.yml
          target: /home/ubuntu

        # 1-9. .env 파일 생성 및 전송
      - name: .env 파일 생성
        run: echo "${{ secrets.ENV }}" > .env

      - name: .env 전송
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: .env
          target: /home/ubuntu/docker/

  # 2. 배포
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 2-1. EC2에서 Docker Compose 실행
      - name: EC2에서 Docker Compose 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/docker
            sudo docker-compose down || true
            sudo docker-compose up -d

      # 2-2. EC2에서 JAR 실행
      - name: SSH로 EC2에 접속하여 JAR 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            sudo fuser -k -n tcp 8080 || true
            sudo nohup java -jar gdg-homepage-dev.jar > ./output.log 2>&1 &

